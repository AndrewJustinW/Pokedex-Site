{"version":3,"sources":["components/PokemonCard.js","images/pokemonLogo.png","components/PokemonGroup.js","components/PageBar.js","components/Pages/Homepage.js","App.js","index.js"],"names":["PokemonCard","pokemon","pokemonList","useState","pokemonInfo","setPokemonInfo","types","setTypes","idNumber","id","slice","useEffect","a","axios","get","name","res","data","loadedTypes","i","length","push","type","fetchSinglePokemon","console","log","typeColor","color","undefined","sprites","className","src","front_default","alt","toUpperCase","map","style","backgroundColor","PokemonGroup","image","srcset","PageBar","page","setPage","totalPages","onClick","Homepage","App","setPokemonList","offset","results","fetchPokemon","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a402078c.chunk.js","sourcesContent":["import React from 'react'\nimport axios from \"axios\"\nimport { useState, useEffect } from 'react'\n\nexport default function PokemonCard({ pokemon, pokemonList }) {\n\n    const [pokemonInfo, setPokemonInfo] = useState({})\n    const [types, setTypes] = useState([])\n\n    let idNumber = ('0000' + pokemonInfo.id).slice(-3);\n\n\n    // Fetching individual card information.\n    useEffect(() => {\n        const fetchSinglePokemon = async () => {\n            const res = await axios.get(`https://pokeapi.co/api/v2/pokemon/${pokemon.name}`)\n            setPokemonInfo(res.data)\n            // console.log(res.data)\n            let loadedTypes = []\n\n            for (let i = 0; i < res.data.types.length; i++) {\n                loadedTypes.push(res.data.types[i].type.name)\n            }\n\n            setTypes(loadedTypes)\n        }\n\n        fetchSinglePokemon()\n\n\n    }, [pokemon.name,])\n\n    console.log(pokemonList)\n\n    // change color of type background\n    const typeColor = (type) => {\n        let color = \"\"\n        switch (type) {\n            case \"grass\":\n                color = \"green\"\n                break\n            case \"fire\":\n                color = \"orange\"\n                break\n            case \"water\":\n                color = \"skyblue\"\n                break\n            case \"poison\":\n                color = \"purple\"\n                break\n            case \"electric\":\n                color = \"rgb(238, 223, 12)\"\n                break\n            case \"rock\":\n                color = \"grey\"\n                break\n            case \"ground\":\n                color = \"brown\"\n                break\n            case \"normal\":\n                color = \"darkgrey\"\n                break\n            case \"psychic\":\n                color = \"darkpurple\"\n                break\n            case \"fairy\":\n                color = \"hotpink\"\n                break\n            case \"fighting\":\n                color = \"darkred\"\n                break\n            case \"flying\":\n                color = \"teal\"\n                break\n            case \"bug\":\n                color = \"rgb(134, 212, 17)\"\n                break\n            case \"ghost\":\n                color = \"pink\"\n                break\n            case \"dragon\":\n                color = \"indianred\"\n                break\n\n\n            default:\n                break;\n        }\n\n        return color;\n    }\n\n    // console.log(pokemonInfo)\n    if (pokemonInfo.sprites === undefined || pokemonInfo.types === undefined) {\n        return (\n            <div></div>\n        )\n    }\n\n    return (\n        <div className=\"pokemon-card\">\n            <div className=\"pokemon-card-image\">\n                <img src={pokemonInfo.sprites.front_default} alt=\"\" />\n\n            </div>\n            <div className=\"pokemon-desc\">\n                <h3 className=\"pokemon-id\">{`# ${idNumber}`}</h3>\n\n                <h2 className=\"pokemon-name\">{pokemonInfo.name[0].toUpperCase() + pokemonInfo.name.slice(1)}</h2>\n\n                <ul className=\"pokemon-types\">\n                    {types.map((type) => (\n                        <li className=\"pokemon-type\" style={{ backgroundColor: typeColor(type) }}>{type[0].toUpperCase() + type.slice(1)}</li>\n                    ))}\n                </ul>\n\n                {/* <div className=\"evolution-container\">\n\n                    {evolutions.map((evolution) => (\n                        <img className=\"evolution-image\" src={evolution} alt=\"Evolution\" />\n                    ))} */}\n\n                {/* <div className=\"evolution-image\" >\n                        evolution\n                    </div>\n\n                    <div className=\"evolution-image\" >\n                        evolution\n\n                    </div> */}\n\n                {/* </div> */}\n\n            </div>\n        </div>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/pokemonLogo.e80c762b.png\";","import React from 'react'\nimport PokemonCard from './PokemonCard'\nimport image from \"../images/pokemonLogo.png\"\n\nexport default function PokemonGroup({ pokemonList }) {\n    let i = 0\n    return (\n        <div>\n            <div className=\"logo-container\">\n                <img className=\"pokemon-logo\" src={image} alt=\"\" srcset=\"\" />\n            </div>\n\n            <div className=\"pokemon-group\">\n\n\n                {pokemonList.map((pokemon) => (\n\n                    <PokemonCard pokemon={pokemon} key={i++} pokemonList={pokemonList} />\n\n                ))}\n            </div>\n        </div>\n    )\n}\n","// import { useState, useEffect } from 'react'\n\nexport default function PageBar({ page, setPage }) {\n\n    let totalPages = []\n    let totalPokemon = 898\n    for (let i = 1; i <= (totalPokemon / 48); i++) {\n        totalPages.push(i)\n    }\n\n    return (\n        <div className=\"pages-container\">\n\n            {totalPages.map((page) => (\n                <div onClick={async () => { await setPage(page) }} className=\"page-button\"> {page} </div>\n            ))}\n        </div>\n    )\n}\n","import PokemonGroup from \"../PokemonGroup\"\nimport PageBar from \"../PageBar\"\n\nexport default function Homepage({ pokemonList, page, setPage, }) {\n    return (\n        <div className=\"homepage\">\n\n            <PokemonGroup pokemonList={pokemonList} />\n            <PageBar page={page} setPage={setPage} />\n\n        </div>\n    )\n}\n","import Nav from \"./components/Nav\"\nimport Homepage from \"./components/Pages/Homepage\"\nimport { useState, useEffect } from \"react\"\nimport axios from \"axios\"\nimport './styles/app.scss'\n\nfunction App() {\n  const [pokemonList, setPokemonList] = useState([])\n  const [page, setPage] = useState(1)\n  const [offset, setOffset] = useState(48)\n\n  useEffect(() => {\n    const fetchPokemon = async () => {\n\n      const res = await axios.get(`https://pokeapi.co/api/v2/pokemon/?limit=48&offset=${(offset * page - offset)}`)\n      setPokemonList(res.data.results)\n    }\n    fetchPokemon()\n  }\n    , [offset, page])\n\n  // console.log(pokemonList)\n\n  return (\n\n    <div className=\"App\">\n      {/* <Nav /> */}\n      <Homepage page={page} setPage={setPage} offset={offset} pokemonList={pokemonList} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}